// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "app/model"
)

// RepositoryInterest is an autogenerated mock type for the RepositoryInterest type
type RepositoryInterest struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, interest
func (_m *RepositoryInterest) Create(ctx context.Context, interest model.Interest) (model.Interest, error) {
	ret := _m.Called(ctx, interest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Interest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Interest) (model.Interest, error)); ok {
		return rf(ctx, interest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Interest) model.Interest); ok {
		r0 = rf(ctx, interest)
	} else {
		r0 = ret.Get(0).(model.Interest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Interest) error); ok {
		r1 = rf(ctx, interest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerExpired provides a mock function with given fields:
func (_m *RepositoryInterest) DeletePartnerExpired() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeletePartnerExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPartnerSwipe provides a mock function with given fields: filter
func (_m *RepositoryInterest) ListPartnerSwipe(filter model.FilterInterest) ([]string, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for ListPartnerSwipe")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.FilterInterest) ([]string, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.FilterInterest) []string); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FilterInterest) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryInterest creates a new instance of RepositoryInterest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryInterest(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryInterest {
	mock := &RepositoryInterest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
