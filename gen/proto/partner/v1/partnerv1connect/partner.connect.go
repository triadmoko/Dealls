// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/partner/v1/partner.proto

package partnerv1connect

import (
	v1 "app/gen/proto/partner/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServicePartnerName is the fully-qualified name of the ServicePartner service.
	ServicePartnerName = "partner.v1.ServicePartner"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServicePartnerSearchPartnerProcedure is the fully-qualified name of the ServicePartner's
	// SearchPartner RPC.
	ServicePartnerSearchPartnerProcedure = "/partner.v1.ServicePartner/SearchPartner"
	// ServicePartnerSwipePartnerProcedure is the fully-qualified name of the ServicePartner's
	// SwipePartner RPC.
	ServicePartnerSwipePartnerProcedure = "/partner.v1.ServicePartner/SwipePartner"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	servicePartnerServiceDescriptor             = v1.File_proto_partner_v1_partner_proto.Services().ByName("ServicePartner")
	servicePartnerSearchPartnerMethodDescriptor = servicePartnerServiceDescriptor.Methods().ByName("SearchPartner")
	servicePartnerSwipePartnerMethodDescriptor  = servicePartnerServiceDescriptor.Methods().ByName("SwipePartner")
)

// ServicePartnerClient is a client for the partner.v1.ServicePartner service.
type ServicePartnerClient interface {
	SearchPartner(context.Context, *connect.Request[v1.RequestSearchPartner]) (*connect.Response[v1.ResponseSearchPartner], error)
	SwipePartner(context.Context, *connect.Request[v1.RequestSwipePartner]) (*connect.Response[v1.ResponseSwipePartner], error)
}

// NewServicePartnerClient constructs a client for the partner.v1.ServicePartner service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServicePartnerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServicePartnerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &servicePartnerClient{
		searchPartner: connect.NewClient[v1.RequestSearchPartner, v1.ResponseSearchPartner](
			httpClient,
			baseURL+ServicePartnerSearchPartnerProcedure,
			connect.WithSchema(servicePartnerSearchPartnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		swipePartner: connect.NewClient[v1.RequestSwipePartner, v1.ResponseSwipePartner](
			httpClient,
			baseURL+ServicePartnerSwipePartnerProcedure,
			connect.WithSchema(servicePartnerSwipePartnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// servicePartnerClient implements ServicePartnerClient.
type servicePartnerClient struct {
	searchPartner *connect.Client[v1.RequestSearchPartner, v1.ResponseSearchPartner]
	swipePartner  *connect.Client[v1.RequestSwipePartner, v1.ResponseSwipePartner]
}

// SearchPartner calls partner.v1.ServicePartner.SearchPartner.
func (c *servicePartnerClient) SearchPartner(ctx context.Context, req *connect.Request[v1.RequestSearchPartner]) (*connect.Response[v1.ResponseSearchPartner], error) {
	return c.searchPartner.CallUnary(ctx, req)
}

// SwipePartner calls partner.v1.ServicePartner.SwipePartner.
func (c *servicePartnerClient) SwipePartner(ctx context.Context, req *connect.Request[v1.RequestSwipePartner]) (*connect.Response[v1.ResponseSwipePartner], error) {
	return c.swipePartner.CallUnary(ctx, req)
}

// ServicePartnerHandler is an implementation of the partner.v1.ServicePartner service.
type ServicePartnerHandler interface {
	SearchPartner(context.Context, *connect.Request[v1.RequestSearchPartner]) (*connect.Response[v1.ResponseSearchPartner], error)
	SwipePartner(context.Context, *connect.Request[v1.RequestSwipePartner]) (*connect.Response[v1.ResponseSwipePartner], error)
}

// NewServicePartnerHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServicePartnerHandler(svc ServicePartnerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	servicePartnerSearchPartnerHandler := connect.NewUnaryHandler(
		ServicePartnerSearchPartnerProcedure,
		svc.SearchPartner,
		connect.WithSchema(servicePartnerSearchPartnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	servicePartnerSwipePartnerHandler := connect.NewUnaryHandler(
		ServicePartnerSwipePartnerProcedure,
		svc.SwipePartner,
		connect.WithSchema(servicePartnerSwipePartnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/partner.v1.ServicePartner/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServicePartnerSearchPartnerProcedure:
			servicePartnerSearchPartnerHandler.ServeHTTP(w, r)
		case ServicePartnerSwipePartnerProcedure:
			servicePartnerSwipePartnerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServicePartnerHandler returns CodeUnimplemented from all methods.
type UnimplementedServicePartnerHandler struct{}

func (UnimplementedServicePartnerHandler) SearchPartner(context.Context, *connect.Request[v1.RequestSearchPartner]) (*connect.Response[v1.ResponseSearchPartner], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partner.v1.ServicePartner.SearchPartner is not implemented"))
}

func (UnimplementedServicePartnerHandler) SwipePartner(context.Context, *connect.Request[v1.RequestSwipePartner]) (*connect.Response[v1.ResponseSwipePartner], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("partner.v1.ServicePartner.SwipePartner is not implemented"))
}
