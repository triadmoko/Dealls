// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/auth/v1/auth.proto

package authv1connect

import (
	v1 "app/gen/proto/auth/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceAuthName is the fully-qualified name of the ServiceAuth service.
	ServiceAuthName = "auth.v1.ServiceAuth"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceAuthLoginProcedure is the fully-qualified name of the ServiceAuth's Login RPC.
	ServiceAuthLoginProcedure = "/auth.v1.ServiceAuth/Login"
	// ServiceAuthRegisterProcedure is the fully-qualified name of the ServiceAuth's Register RPC.
	ServiceAuthRegisterProcedure = "/auth.v1.ServiceAuth/Register"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serviceAuthServiceDescriptor        = v1.File_proto_auth_v1_auth_proto.Services().ByName("ServiceAuth")
	serviceAuthLoginMethodDescriptor    = serviceAuthServiceDescriptor.Methods().ByName("Login")
	serviceAuthRegisterMethodDescriptor = serviceAuthServiceDescriptor.Methods().ByName("Register")
)

// ServiceAuthClient is a client for the auth.v1.ServiceAuth service.
type ServiceAuthClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
}

// NewServiceAuthClient constructs a client for the auth.v1.ServiceAuth service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceAuthClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceAuthClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serviceAuthClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+ServiceAuthLoginProcedure,
			connect.WithSchema(serviceAuthLoginMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+ServiceAuthRegisterProcedure,
			connect.WithSchema(serviceAuthRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceAuthClient implements ServiceAuthClient.
type serviceAuthClient struct {
	login    *connect.Client[v1.LoginRequest, v1.LoginResponse]
	register *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
}

// Login calls auth.v1.ServiceAuth.Login.
func (c *serviceAuthClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls auth.v1.ServiceAuth.Register.
func (c *serviceAuthClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ServiceAuthHandler is an implementation of the auth.v1.ServiceAuth service.
type ServiceAuthHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
}

// NewServiceAuthHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceAuthHandler(svc ServiceAuthHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceAuthLoginHandler := connect.NewUnaryHandler(
		ServiceAuthLoginProcedure,
		svc.Login,
		connect.WithSchema(serviceAuthLoginMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	serviceAuthRegisterHandler := connect.NewUnaryHandler(
		ServiceAuthRegisterProcedure,
		svc.Register,
		connect.WithSchema(serviceAuthRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.ServiceAuth/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceAuthLoginProcedure:
			serviceAuthLoginHandler.ServeHTTP(w, r)
		case ServiceAuthRegisterProcedure:
			serviceAuthRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceAuthHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceAuthHandler struct{}

func (UnimplementedServiceAuthHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.ServiceAuth.Login is not implemented"))
}

func (UnimplementedServiceAuthHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.ServiceAuth.Register is not implemented"))
}
